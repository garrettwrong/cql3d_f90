# makefile for CQL3D using gfortran on OSX with brew install gcc pgplot

SHELL     = /bin/sh
NAME      = xcql3d_gfortran64
COMPILER=	gfortran
BUILDER=	$(COMPILER)
INCLUDES  = frcomm.h frname.h frname_decl.h name.h trans.h wpadvnc.h
SOURCES  =   param.f90 cqcomm.f90 r8subs.f90 advnce.f90 pltmain.f90 \
	pltdf.f90 eqrhopsi.f90 equilib.f90 \
	impavnc0.f90  frplteq.f90 tdeqdsk.f90  \
	bsl.f90  bsu.f90 \
	a_cqlp.f90  abchief.f  achief1.f  achiefn.f  aclear.f ainalloc.f  \
	aindflt.f  aindflt1.f aindfpa.f  aingeom.f  ainitial.f   \
	ainpla.f  ainplt.f  ainpltpa.f   \
	ainsetpa.f  ainsetva.f  ainspec.f  ainvnorm.f ampfar.f \
	aminmx.f bavdens.f  bavgmax.f  baviorbt.f   \
	bcast.f cfpcoefc.f  cfpcoefn.f  \
	cfpcoefr.f  cfpgamma.f  cfpleg.f     \
	cfpmodbe.f  cfpsymt.f  coefefad.f  coefefld.f  coefegad.f  \
	coeffpad.f  coefload.f  coefmidt.f  coefmidv.f   \
	coefrfad.f  coefstup.f  coefsyad.f  coefwti.f  \
	coefwtj.f  diag.f  diagcfac.f   \
	diagdens.f  diagdenz.f  diagentr.f  diagescl.f  diaggnde.f  \
	diaggnde2.f  diagimpd.f  diagscal.f  diagwrng.f  diagxswt.f   \
	diagxswx.f  dsk_gr.f dskout.f  efield.f  eflditer.f eqalloc.f   \
	eqcoord.f  eqelpse.f  eqflxavg.f  eqfn.f  \
	eqfndpsi.f  eqfninv.f  eqfpsi.f   \
	eqindflt.f  eqinitl.f  eqjac.f  eqonovrp.f  \
	eqorbit.f  eqrhs.f   \
	eqtopeol.f  eqvolpsi.f  eqwrng.f  \
	esefld.f  exlin.f  exsweep.f  exsweept.f   \
	exsweepx.f  finit.f  firstdrv.f  fle.f flxfn.f  \
	freya.f  freyasou.f  frhexdrv.f   \
	frinitl.f  frinitz.f  frnbdep2.f  frnfreya.f  \
	frset.f frsmooth.f  frsplft.f   \
	frstup.f  frsubs.f  frsuppor.f  frwrong.f  \
	ilut.f  impchk.f  impnorm.f  it3dalloc.f  \
	lookup.f  losscone.f  lossegy.f  lossorbm.f  \
	losstor.f  micgetr.f   \
	micgmbnd.f  micgnbnd.f  micxinil.f  micxinim.f  micxinit.f  \
	micxiniz.f  netcdfrf.f  netcdfrw2.f ntdstore.f   \
	ntloop.f  pack21.f pltcont.f  pltcycl.f \
	pltdnz.f  pltelec.f  pltendn.f   \
	pltends.f  pltfluxs.f pltfofvv.f pltfvsv.f  pltinit.f  pltlosc.f  \
	pltpower.f  pltprppr.f   \
	pltrstv.f  pltrun.f pltstrml.f  pltvec.f  pltvectr.f  \
	pltvflux.f  profaxis.f  profiles.f prppr.f   \
	prpprctr.f  psif.f  psifp.f  psifppy.f  psifpy.f  psiinv.f  \
	r8lsode.f  rdc_multi.f rdc_bplt.f restcon.f resthks.f  \
	restvty.f  rf.f  sigalloc.f  siggy.f  sigmax.f  sigsetup.f  \
	sigv5d.f sigfn.f sigie.f  sigmaxwl.f   sigv.f  \
	soucrit.f sounorm.f  soup.f  soup0.f  souplt.f   \
	sourc0.f  sourcee.f  sourcef.f  sourceko.f sourcpwr.f   \
	synchrad.f  tdbootst.f tdboothi.f  tdchief.f  tddiag.f  \
	tddsig.f  tdfinterp.f  tdinitl.f  tdinlegw.f  \
	tdinterp.f  tdnflxs.f  tdnpa.f  tdnpadiag.f  tdnpa0.f  \
	tdnpacxcs.f  tdnpalam.f  tdnpabscs.f  tdoutput.f   \
	tdplteq.f  tdpltjop.f  tdpltmne.f  tdpro.f  \
	tdreadf.f  tdrmshst.f  tdsetnpa.f  tdsetsxr.f   \
	tdstin.f  tdsxr.f  tdsxr0.f  tdsxray.f  tdsxrplt.f  \
	tdtloop.f  tdtoarad.f   tdtranspn.f  \
	tdtoaray.f  tdtraloc.f  tdtransp.f  tdtravct.f\
	tdtrchk.f  tdtrchkd.f  tdtrcon.f   \
	tdtrdfus.f  tdtrfcop.f  tdtrflg.f  tdtrflx.f  \
	tdtrmuy.f  tdtrrsou.f  tdtrrtov.f   \
	tdtrrtov2.f  tdtrsavf.f  tdtrsym.f  tdtrvint.f  \
	tdtrvsou.f  tdtrvtor.f  tdtrvtor2.f   \
	tdtrvtor3.f  tdtrwtl.f  tdtry.f  tdtscinp.f  tdtscout.f  \
	tdwrng.f  tdwritef.f  tdxin13d.f   \
	tdxin23d.f  tdxin33d.f  tdxinitl.f  urfalloc.f  \
	urfavg.f  urfb0.f  urfbes.f   \
	urfbplt.f  urfchief.f  urfdamp0.f  urfdamp1.f  \
	urfdamp2.f  urfdampa.f urfdout.f  urfedge.f   \
	urffflx.f  urfindfl.f  urfinitl.f  urfmidv.f  \
	urfpack.f  urfpackm.f  urfrays.f  urfread.f   \
	urfread_.f  urfsetup.f  urfwrite.f  urfwrite_.f  \
	urfwrong.f  urfwr0.f  urfwr0c.f \
	vlf.f vlfalloc.f vlfbplt.f vlfsetup.f vlh.f  vlhbplt.f vlhd.f  \
	wpalloc.f  wparsou.f  wpavg.f  wpbdry.f  \
	wpcheck.f  wpchgdy.f wpcthta.f  wpelecf.f   \
	wpinitl.f  wploweq.f  wpsavf.f  wptrafx.f  wptramu.f  \
	wptrmuy.f  wpvptb.f  wpwrng.f  wpmshchk.f \
	zblock.f  zcunix.f  zfreya.f    znonsym.f

F90OBJECTS = $(filter %.o,$(SOURCES:.f90=.o))
OBJECTS = $(filter %.o,$(SOURCES:.f=.o))

LOCATION  =   -L /usr/lib -L/usr/local/lib  
LIBRARIES =   -lnetcdff -lnetcdf -lpgplot
INCLUDE   =/usr/local/include

DEBUG     = -g 
OPTIMIZE  = -O1
CSPECIAL  = -fdefault-real-8  -fdefault-double-8
LDSPECIAL =
COMPILE   =  $(COMPILER) -c $(DEBUG) $(CSPECIAL)  $(OPTIMIZE) -I $(INCLUDE) 
LOAD      = $(BUILDER) -o $(NAME) $(LDSPECIAL) $(DEBUG) # Remove -m for optimize
PROTECT   = chmod 755
DELETE    = rm -f

# The following gives suffixes to be used in checking for suffix rules.
# Written without dependencies, it may be useful to turn of such checking?
.SUFFIXES:

$(NAME):           $(F90OBJECTS) $(OBJECTS) 
	$(LOAD)    $(F90OBJECTS) $(OBJECTS)  $(LOCATION) $(LIBRARIES)
	$(PROTECT) $(NAME)

# Check if inlude files have changed i guess
$(SOURCES):        $(INCLUDES)


# Following use of pattern matching works; 
# it is based on statements in Sect. 10.7 of gmake Manual
# by Stallman and McGrath.
# However, the two rules following this seem clearer to me (BobH).
# Me too BobH, me too. ;)  (GBW).
#%.o:               %.f        $(INCLUDES)
#	$(COMPILE) $< -o $@


#----
# Now that we have modules and scope,
#   we unfortunately do have dependencies.
# Do not fret, they're not so bad.
DAGOBJS = param.o cqcomm.o r8subs.o advnce.o pltmain.o \
          pltdf.o eqrhopsi.o equilib.o \
          impavnc0.o  frplteq.o tdeqdsk.o bsl.o bsu.o
# And this describes their dag...
cqcomm.o: cqcomm.f90 param.o
r8subs.o: r8subs.f90 cqcomm.o
bsl.o: bsl.f90 param.o cqcomm.o
bsu.o: bsu.f90 param.o cqcomm.o
advnce.o: advnce.f90 cqcomm.o r8subs.o bsu.o bsl.o
pltdf.o: pltdf.f90 param.o cqcomm.o r8subs.o
pltmain.o: pltmain.f90 param.o cqcomm.o pltdf.o
eqrhopsi.o: eqrhopsi.f90 param.o cqcomm.o
equilib.o: equilib.f90 param.o cqcomm.o r8subs.o
impavnc0.o: impavnc0.f90 param.o cqcomm.o advnce.o r8subs.o bsu.o bsl.o
frplteq.o: frplteq.f90 param.o cqcomm.o r8subs.o
tdeqdsk.o: tdeqdsk.f90 param.o cqcomm.o equilib.o r8subs.o

#----
# From here we will assume that all deps to build
# remaining files have been met.
# (Other words, we assume remaining .f files 
#  require all DAGOBJS.
# That is overkill, but simple.
# As files migrate or evolve, we add small rules for each file.
# This will also document how the code is structured in practice.

#GBW, until all files have the same extension (90 I hope!)
# filter out objects with correct extension

# see Sect. 4.10.1, Static Pattern Rules.
$(filter %.o,$(F90OBJECTS)): %.o: %.f90 $(INCLUDES)
	$(COMPILE) $< -o $@ 

$(filter %.o,$(OBJECTS)): %.o: %.f $(DAGOBJS) $(INCLUDES)
	$(COMPILE) $< -o $@

rebuild:
	$(COMPILE) $(SOURCES) $(F90SOURCES)
	$(LOAD) $(OBJECTS) $(F90OBJECTS) $(LOCATION) $(LIBRARIES)

clean:
	$(DELETE)  $(NAME) $(OBJECTS) $(F90OBJECTS) *.lst$(DELETE)
	$(DELETE) *.mod

