c
c
      subroutine pltcont(k,pltcase,tt_)
      implicit integer (i-n), real*8 (a-h,o-z)
      save
      include 'param.h'
      include 'comm.h'
CMPIINSERT_INCLUDE

      parameter(nconta=100)
      common/contours/cont(nconta),tempcntr(nconta)
      integer pltcase
      character*(*) tt_
      character*64 tx_,ty_
c...  
cmnt  This routine performs contour plots of distributions
cmnt  given in temp1(0:iyp1,0,jxp1) as a function of v,theta,
cmnt  as specified by x,y.
cmnt    pltcase=1: geometric progression of plot contours,
cmnt    pltcase.ne.1: contours equispaced for max. at temp(k,lr_).
cmnt    k gives species index.
cmnt    tt_ is contour plot heading.
cmnt    Additional annotation of the plot can be added from
cmnt    the calling routine.
c...
C
C     PASSING ARRAYS TO PGFUNC1, FOR PGPLOT PGCONX:
      pointer wx,wy
      REAL wx(:),wy(:), xpt,ypt
      REAL RCONT,RXMAXQ,RTEMP1,RXPTS,RYPTS
      DIMENSION RCONT(NCONTA),RTEMP1(iy,jx),RXPTS(2),RYPTS(2)
      COMMON /PGLOCAL1/wx,wy,IIY,JXQ
C     wx IS V-NORM ARRAY, wy IS THETA ARRAY.  TYPE REAL.
      real*4 RTAB1(iy),RTAB2(iy) ! local

      EXTERNAL PGFUNC1


CMPIINSERT_IF_RANK_NE_0_RETURN
 ! make plots on mpirank.eq.0 only

      if (noplots.eq."enabled1") return

      if(ASSOCIATED(wx)) then
        ! wx and wy are already allocated => do nothing 
      else ! Not allocated yet
        allocate(wx(jx))
        allocate(wy(iy))
      endif
      
      if (ncont.gt.nconta) stop 'in pltcont'

      dmin=0.
      dmax=0.

c     If pltlim = 'u/c' or 'energy', plot 2D distributions
c     versus u/c,theta, up to a maximum u/c specified by 
c     pltlimm (as u/c or energy).
c     If pltlim = 'x', plot versus x,theta to pltlimm.
      if (pltlim.eq.'u/c' .or. pltlim.eq.'energy') then
         if (pltlim.eq.'u/c') then
            pltlimmm=pltlimm
         else
            pltlimmm=sqrt((1.+pltlimm/restmkev)**2-1.)
         endif
         jxq=min(luf(pltlimmm,uoc,jx),jx)
         xmaxq=uoc(jxq)
         iyjxq=iy*jxq
         tx_='v_parallel (u/c)'
         ty_='v_perp (u/c)'
      elseif (tandem.eq."enabled" .and. fmass(k).gt.1.e-27) then
         jxq=jlwr
         xmaxq=xlwr
         iyjxq=iy*jlwr
         tx_='v_parallel (u/vnorm)'
         ty_='v_perp (u/vnorm)'
      else
         pltlimmm=pltlimm
         jxq=min(luf(pltlimmm,x,jx),jx)
         xmaxq=x(jxq)
         iyjxq=iy*jxq
         tx_='v_parallel (u/vnorm)'
         ty_='v_perp (u/vnorm)'
      endif

      if (pltlim.eq.'u/c' .or. pltlim.eq.'energy') then
         do j=1,jxq
            tam1(j)=x(j)/cnorm
         enddo
      else
         do j=1,jxq
            tam1(j)=x(j)
         enddo
      endif

C     


      DO J=1,JXQ
         DO I=1,iy
            DMIN=MIN(temp1(I,J),DMIN)
            DMAX=MAX(temp1(I,J),DMAX)
            RTEMP1(I,J)=temp1(I,J)
         ENDDO
      ENDDO


      admin=abs(dmin)
c**bh 
c
      if(dmax.le.0)  go to 999
c**bh 
c
c     In the case abs(dmin).le.contrmin*dmax, then plot contours
c     occur at levels:
c     cont(j)=dmax * contrmin**(1-(j-.5)/ncont),  j=1,ncont
c     This can be described as a geometric progression of values
c     from (near) dmax down to contrmin*dmax.
c
      if (dmin.ge.0. .or. admin.lt.contrmin*dmax) then
         k2=1
         if(pltcase.eq.1) then
            smin=log(contrmin*dmax)
            if (admin/dmax .gt. contrmin) smin=log(admin)
            smax=log(dmax)
            dcont=(smax-smin)/dfloat(ncont)
            cont(1)=smin+.5*dcont
            do 20 kc=2,ncont
               cont(kc)=cont(kc-1)+dcont
 20         continue
            do 30 kc=1,ncont
               cont(kc)=exp(cont(kc))
 30         continue
         else

c     Modifying above case, which is usual situation for a function
c     for which dmin .ge.0. .or. not very  negative, to contours which
c     will be equispaced for a Maxwellian distribution with temperature
c     equal to that defined for the distribution:
            emax=-temp(k,lr_)*log(contrmin)
            if (emax.gt.enorm) emax=enorm
            gammax=1.+emax/restmkev
            uocmax=sqrt(gammax**2-1.)
            do j=1,ncont
               cont(j)=j/dfloat(ncont)*uocmax
            enddo
            do j=1,ncont
               cont(j)=dmax*
     +              exp(-restmkev*(sqrt(1.+cont(j)**2)-1.)/temp(k,lr_))
            enddo
         endif

      else
        if (dmax .gt. 0.) then
          k2=ncont*.1+1
          ncontp=ncont-k2+1
          ncontm=k2-1
          smaxp=log(dmax)
          sminp=log(contrmin*dmax)
        else
          ncontm=ncont
          ncontp=1
          k2=1
        endif
        sminm=log(-contrmin*dmin)
        if (dmax/dmin.gt.contrmin) sminm=log(-dmax)
        smaxm=log(-dmin)
        dcontp=(smaxp-sminp)/dfloat(ncontp)
        dcontm=(smaxm-sminm)/dfloat(ncontm)
        cont(1)=smaxm-.5*dcontm
        do 40 kc=2,ncontm
          cont(kc)=cont(kc-1)-dcontm
 40     continue
        do 50 kc=1,ncontm
          cont(kc)=-exp(cont(kc))
 50     continue
        if (dmax .gt. 0.) then
          cont(k2)=sminp-.5*dcontp
          do 60 kc=k2+1,ncont
            cont(kc)=cont(kc-1)+dcontp
 60       continue
          do 70 kc=k2,ncont
            cont(kc)=exp(cont(kc))
 70       continue
        endif
      endif
      if (k2.eq.0) k2=1 ! YuP: bug? was if(k.eq.0)
      do 71 js=1,ncont
        tempcntr(js)=cont(js)
 71   continue

      DO J=1,JXQ
         wx(J)=TAM1(J)
      ENDDO
      DO I=1,iy
         wy(I)=y(I,L_)
      ENDDO
      DO JS=1,NCONT
         RCONT(JS)=CONT(JS)
         !write(*,*)'pltcont: lr_,JS,CONT(JS)=',lr_,JS,CONT(JS)
      ENDDO
      IIY=iy
      RXMAXQ=XMAXQ

CPGPLT      CALL PGSVP(.2,.8,.65,.9)
        IF ( RXMAXQ.eq.0. ) THEN
           RXMAXQ=1.
        ENDIF
CPGPLT      CALL PGSWIN(-RXMAXQ,RXMAXQ,0.,RXMAXQ)
CPGPLT      CALL PGBOX('BCNST',0.,0,'BCNST',0.,0)
CPGPLT      CALL PGLAB(tx_,ty_,tt_)

      t0t=sin(thb(l_))/cos(thb(l_))  ! PLOT t-p boundary (ZOW cone)
      if (t0t .lt. 1.) then
         RXPTS(1)=0.
         RYPTS(1)=0.
         RXPTS(2)=XMAXQ
         RYPTS(2)=XMAXQ*T0T
CPGPLT         CALL PGLINE(2,RXPTS,RYPTS)
         RXPTS(2)=-XMAXQ
CPGPLT         CALL PGLINE(2,RXPTS,RYPTS)
      else
         RXPTS(1)=0.
         RYPTS(1)=0.
         RXPTS(2)=XMAXQ/T0T
         RYPTS(2)=XMAXQ
CPGPLT         CALL PGLINE(2,RXPTS,RYPTS)
         RXPTS(2)=-XMAXQ/T0T
CPGPLT         CALL PGLINE(2,RXPTS,RYPTS)
      endif

      !YuP[03-2016] Added: plot v=vnorm line
      do i=1,iy
        RTAB1(i)= coss(i,lr_) ! v_par
        RTAB2(i)= sinn(i,lr_) ! v_perp
      enddo
CPGPLT      CALL PGLINE(iy,RTAB1,RTAB2)
      
      !YuP[03-2016] Added: plot v=vth line, for the 1st gen. species
      do i=1,iy
        RTAB1(i)= (vth(k,lr_)/vnorm)*coss(i,lr_) ! vth_par
        RTAB2(i)= (vth(k,lr_)/vnorm)*sinn(i,lr_) ! vth_perp
      enddo
      ! Five different line styles are available:
      ! 1 (full line), 2 (dashed), 3 (dot-dash-dot-dash), 4 (dotted),
CPGPLT      CALL PGSLS(4) 
CPGPLT      CALL PGLINE(iy,RTAB1,RTAB2)
CPGPLT      CALL PGSLS(1) ! 1-> restore solid line
      
CPGPLT      CALL PGSLS(1) ! 1-> solid line
CPGPLT      CALL PGSLW(lnwidth) !lnwidth=3 line width in units of 0.005

CPGPLT      CALL PGCONX(RTEMP1,iy,jx,1,iy,1,JXQ,RCONT,NCONT,PGFUNC1)

      if (k.eq.0) return
      rr=rpcon(lr_) !rovera(lr_)*radmin  ! YuP[03-2016] changed to rpcon
      write(t_,150) n,timet
CPGPLT        CALL PGMTXT('B',6.,0.,0.,t_)
      write(t_,151) rovera(lr_),rr
CPGPLT        CALL PGMTXT('B',7.,0.,0.,t_)
      write(t_,153) rya(lr_), rpcon(lr_), lr_
CPGPLT        CALL PGMTXT('B',8.,0.,0.,t_)
 150  format("time step n=",i5,5x,"time=",1pe10.2," secs")
 151  format( "r/a=",1pe10.2,5x,"radial position (R)=",1pe10.3," cm")
 153  format( "rya=",1pe10.3,5x,"R=rpcon=",1pe10.3," cm,  Surf#",i4)
 999  return
      end
C
C
      subroutine PGFUNC1(VISBLE,yplt,xplt,zplt)
      INTEGER VISBLE
      REAL xplt,yplt,zplt
      pointer wx,wy
      REAL wx(:),wy(:)
C
C 
      INCLUDE 'param.h'
      include 'comm.h'

      COMMON /PGLOCAL1/wx,wy,IIY,JXQ

C     wx IS V-NORM ARRAY, wy IS THETA ARRAY.  TYPE REAL.
C     xplt (yplt) IS FRACTIONAL INDEX IN V-NORM (THETA) ARRAY.
C     THIS SUBROUTINE MOVES PEN TO NORMALIZED V_PARALLEL,V_PERP COORDS.

      IIX=INT(xplt)
      IF (IIX.GE.1 .AND. IIX.LT.jx) THEN
         XX=wx(IIX) + (xplt-IIX)*(wx(IIX+1)-wx(IIX))
      ELSEIF (IIX.LE.1) THEN
         XX=wx(1)
      ELSE
         XX=wx(jx)
      ENDIF

      IIY=INT(yplt)
      IF (IIY.GE.1 .AND. IIY.LT.iy) THEN
         YY=wy(IIY) + (yplt-IIY)*(wy(IIY+1)-wy(IIY))
      ELSEIF (IIY.LE.1) THEN
         YY=wy(1)
      ELSE
         YY=wy(iy)
      ENDIF

      XWORLD=XX*COS(YY)
      YWORLD=XX*SIN(YY)

C      write(*,*) 'visble,x,y,z,xworld,yworld',visble,x,y,z,xworld,yworld

      IF (VISBLE.EQ.0) THEN
CPGPLT         CALL PGMOVE(XWORLD,YWORLD)
      ELSE
CPGPLT         CALL PGDRAW(XWORLD,YWORLD)
      ENDIF

      RETURN
      END



      
