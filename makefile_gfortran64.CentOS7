# makefile for CQL3D

SHELL     = /bin/sh
NAME      = xcql3d
NAME_MPI = mpi_$(NAME)
COMPILER  = gfortran
COMPILER_MPI = mpifort
LIBTOOL   = ar rcs

# TRANSP build stuff
ifdef FC90
    COMPILER = $(FC90)
endif

# INCLUDE line
include include_dependency.mk
# Check if inlude files have changed i guess
$(SOURCES):        $(INCLUDES)

# SOURCE line
include source_dependency.mk

OBJECTS = $(SOURCES:.F90=.o)

LOCATION  =   -L/usr/lib64
LIBRARIES =   -lX11 -lnetcdff -lnetcdf
INCLUDE   =   -I/usr/include -I/usr/lib64/gfortran/modules/
ifdef MPIMODDIR
	INCLUDE := $(INCLUDE) -I$(MPIMODDIR)
endif

ifdef NOPGPLOT
	PGFLAG = -DNOPGPLOT
else
	LOCATION += -L${PGPLOT_DIR}
	LIBRARIES += -lpgplot
endif

DEBUG     = -g
#common gfortran dbg flags
#-g -Wall -Wextra -Warray-temporaries -Wconversion -fimplicit-none -fbacktrace -ffree-line-length-0 -fcheck=all -ffpe-trap=zero,overflow,underflow -finit-real=nan
# Will bring in FFLAGS from parent env, ex TRANSP, if defined, or you may override it here.
CSPECIAL  = $(FFLAGS)
OPTIMIZE  = -O1
#force double prec -fdefault-real-8  -fdefault-double-8
LDSPECIAL = -Wl,-noinhibit-exec
COMPILE   = $(COMPILER) -fPIC -c $(PGFLAG) $(DEBUG) $(CSPECIAL)  $(OPTIMIZE) $(INCLUDE)
COMPILE_MPI  = $(COMPILER_MPI) -fPIC -c -D__MPI $(PGFLAG) $(DEBUG) $(CSPECIAL)  $(OPTIMIZE) $(INCLUDE)
LOAD      = $(COMPILER) -o $(NAME) $(LDSPECIAL) $(DEBUG)
LOAD_MPI  = $(COMPILER_MPI) -o $(NAME_MPI) $(LDSPECIAL) $(DEBUG)
PROTECT   = chmod 755
DELETE    = rm -f

standalone: $(NAME)
libs: lib$(NAME).a lib$(NAME).so
all: libs $(NAME)_shared standalone

$(NAME):           $(OBJECTS)
	$(LOAD)    $^  $(LOCATION) $(LIBRARIES)
	$(PROTECT) $(NAME)

# For the libraries, we do not want a main
LIBOBJS = $(filter-out a_cqlp.o, $(OBJECTS))
lib$(NAME).so: $(LIBOBJS)
	$(COMPILER) -shared -o $@ $(LDSPECIAL) $(DEBUG) $^ $(LOCATION) $(LIBRARIES)
	$(PROTECT) $@

lib$(NAME).a: $(LIBOBJS)
	$(LIBTOOL) $@ $^
	$(PROTECT) $@

$(NAME)_shared: $(NAME) lib$(NAME).so a_cqlp.o
	$(COMPILER) -o $@ $(LDSPECIAL) $(DEBUG) a_cqlp.o -L. -l$< $(LOCATION) $(LIBRARIES)
	$(PROTECT) $@


#------ Module generated dependencies
# Now that we have modules and scope,
#   we unfortunately do have dependencies.
# Do not fret, they're not so bad.
oext = o
include module_dependency.mk


$(OBJECTS): %.o: %.F90 $(INCLUDES)
	$(COMPILE) $< -o $@


# ------------------------  Similarly for MPI

standalone_mpi: $(NAME_MPI)
libs_mpi: lib$(NAME_MPI).a lib$(NAME_MPI).so
mpi: libs_mpi $(NAME_MPI)_shared standalone_mpi

OBJECTS_MPI = $(OBJECTS:.o=.o_mpi) cql3d_mpilib.o_mpi
#INCLUDE_MPI = $(INCLUDE)

$(NAME_MPI):           $(OBJECTS_MPI)
	$(LOAD_MPI)    $^  $(LOCATION) $(LIBRARIES)
	$(PROTECT) $(NAME_MPI)

$(NAME_MPI)_shared: $(NAME_MPI) lib$(NAME_MPI).so a_cqlp.o_mpi
	$(COMPILER_MPI) -o $@ $(LDSPECIAL) $(DEBUG) a_cqlp.o_mpi -L. -l$< $(LOCATION) $(LIBRARIES)
	$(PROTECT) $@

LIBOBJS_MPI = $(filter-out a_cqlp.o_mpi, $(OBJECTS_MPI))
lib$(NAME_MPI).a: $(LIBOBJS_MPI)
	$(LIBTOOL) $@ $^
	$(PROTECT) $@

lib$(NAME_MPI).so: $(LIBOBJS_MPI)
	$(COMPILER_MPI) -shared -o $@ $(LDSPECIAL) $(DEBUG) $^ $(LOCATION) $(LIBRARIES)
	$(PROTECT) $@

%.o_mpi: %.F90 $(INCLUDES)
	$(COMPILE_MPI) $< -o $@

oext = o_mpi
include module_dependency.mk

# ------------------------ /MPI

rebuild:
	$(COMPILE) $(SOURCES)
	$(LOAD) $(OBJECTS) $(LOCATION) $(LIBRARIES)

clean:
	$(DELETE)  $(NAME) $(OBJECTS)
	$(DELETE) *.mod
	$(DELETE) *.so *.a  $(NAME)_shared
	$(DELETE) *.o_mpi
	$(DELETE) $(NAME_MPI) $(NAME_MPI)_shared
	$(DELETE) $(NAME)

.PHONY: all
.PHONY: mpi
.PHONY: clean
.PHONY: libs
.PHONY: rebuild
.PHONY: standalone
.PHONY: standalone_mpi
