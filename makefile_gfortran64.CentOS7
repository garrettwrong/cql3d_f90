# makefile for CQL3D using gfortran64 on bob8 (Intel core 2)

SHELL     = /bin/sh
NAME      = xcql3d_gfortran64
COMPILER=	gfortran
BUILDER=	$(COMPILER)

# INCLUDE line
include include_dependency.mk

# SOURCE line
include source_dependency.mk

F90OBJECTS = $(filter %.o,$(SOURCES:.f90=.o))
OBJECTS = $(filter %.o,$(SOURCES:.f=.o))

#LOCATION  =     -L/usr/lib64  -L/usr/local/pgplot -L/home/bobh/cql3d/cql3d_cvs/SPARSKIT2_gfortran64
#LOCATION  =     -L/usr/lib64  -L/usr/local/pgplot
#LOCATION  =   -L/usr/local/netcdf4.0/lib64  -L/usr/lib64  -L/home/bobh/pgplot/pgplot_build_140331
LOCATION  =   -L/usr/local/netcdf4.0/lib64   -L/home/bobh/pgplot/pgplot_build_140331
#LIBRARIES=   -lskit -lX11 -lnetcdff -lnetcdf -lpgplot -llapack -lblas
#LIBRARIES=   -lX11 -lnetcdff -lnetcdf -lpgplot -llapack -lblas
LIBRARIES=   -lX11 -lnetcdff -lnetcdf -lpgplot
#INCLUDE=/usr/local/netcdf4.0/include /usr/include 
INCLUDE=/usr/local/netcdf4.0/include

DEBUG     = -g -fbacktrace
OPTIMIZE  = -O1
LISTING   = -Mlist
#CSPECIAL  = -finit-local-zero #Need gfortran 4.3 for zeroing
#CSPECIAL  = -Wno-padded
CSPECIAL  =
SPECIAL   = -byteswapio -Mbackslash
#LDSPECIAL = -Wl,-noinhibit-exec -finit-local-zero #Need gfortran 4.3 for zeroing
LDSPECIAL = -Wl,-noinhibit-exec
COMPILE   = $(COMPILER) -c $(DEBUG) $(CSPECIAL)  $(OPTIMIZE) -I $(INCLUDE)
LOAD      = $(BUILDER) -o $(NAME) $(LDSPECIAL) $(DEBUG)
PROTECT   = chmod 755
DELETE    = rm -f

# The following gives suffixes to be used in checking for suffix rules.
# Written without dependencies, it may be useful to turn of such checking?
.SUFFIXES:

$(NAME):           $(F90OBJECTS) $(OBJECTS)
	$(LOAD)    $(F90OBJECTS) $(OBJECTS)  $(LOCATION) $(LIBRARIES)
	$(PROTECT) $(NAME)

# Following use of pattern matching works;
# it is based on statements in Sect. 10.7 of gmake Manual
# by Stallman and McGrath.
# However, the two rules following this seem clearer to me (BobH).
#%.o:               %.f        $(INCLUDES)
#	$(COMPILE) $< -o $@


#------ Module generated dependencies
# Now that we have modules and scope,
#   we unfortunately do have dependencies.
# Do not fret, they're not so bad.

include module_dependency.mk


#GBW, until all files have the same extension (90 I hope!)
# filter out objects with correct extension
# this will simplify greatly once all f90...

# see Sect. 4.10.1, Static Pattern Rules.
$(filter %.o,$(F90OBJECTS)): %.o: %.f90 $(INCLUDES)
	$(COMPILE) $< -o $@ 

$(filter %.o,$(OBJECTS)): %.o: %.f $(INCLUDES)
	$(COMPILE) $< -o $@

rebuild:
	$(COMPILE) $(SOURCES) $(F90SOURCES)
	$(LOAD) $(OBJECTS) $(F90OBJECTS) $(LOCATION) $(LIBRARIES)

clean:
	$(DELETE)  $(NAME) $(OBJECTS) $(F90OBJECTS)
	$(DELETE) *.mod
